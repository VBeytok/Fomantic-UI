/*!
 * # Fomantic-UI - Modal
 * http://github.com/fomantic/Fomantic-UI/
 *
 *
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */


/*******************************
            Theme
*******************************/

@type    : 'module';
@element : 'modal';

@import (multiple) '../../theme.config';

/*******************************
             Modal
*******************************/

.ui.crowdin-modal {
  position: absolute;
  display: none;
  z-index: @zIndex;
  text-align: left;

  background: @background;
  border: @border;
  box-shadow: @boxShadow;
  transform-origin: @transformOrigin;

  flex: 0 0 auto;

  border-radius: @borderRadius;
  user-select: text;
  will-change: top, left, margin, transform, opacity;
}

.ui.crowdin-modal > :first-child:not(.close):not(.dimmer),
.ui.crowdin-modal > i.icon:first-child + *,
.ui.crowdin-modal > .dimmer:first-child + *:not(.close),
.ui.crowdin-modal > .dimmer:first-child + i.icon + * {
  border-top-left-radius: @borderRadius;
  border-top-right-radius: @borderRadius;
}

.ui.crowdin-modal > :last-child {
  border-bottom-left-radius: @borderRadius;
  border-bottom-right-radius: @borderRadius;
}

.ui.crowdin-modal > .ui.dimmer {
  border-radius: inherit;
}

/*******************************
            Content
*******************************/

/*--------------
     Close
---------------*/

.ui.crowdin-modal > .close {
  cursor: pointer;
  position: absolute;
  top: @closeTop;
  right: @closeRight;
  z-index: 1;

  opacity: @closeOpacity;
  font-size: @closeSize;
  color: @closeColor;

  width: @closeHitbox;
  height: @closeHitbox;
  padding: @closePadding;
}
.ui.crowdin-modal > .close:focus,
.ui.crowdin-modal > .close:hover {
  opacity: 1;
  outline: none;
}

/*--------------
     Header
---------------*/

.ui.crowdin-modal > .header {
  display: block;
  font-family: @headerFontFamily;
  background: @headerBackground;
  margin: @headerMargin;
  padding: @headerPadding;
  box-shadow: @headerBoxShadow;

  color: @headerColor;
  border-bottom: @headerBorder;
}
.ui.crowdin-modal > .header:not(.ui) {
  font-size: @headerFontSize;
  line-height: @headerLineHeight;
  font-weight: @headerFontWeight;
}

/*--------------
     Content
---------------*/

.ui.crowdin-modal > .content {
  display: block;
  width: 100%;
  font-size: @contentFontSize;
  line-height: @contentLineHeight;
  padding: @contentPadding;
  background: @contentBackground;
}
.ui.crowdin-modal > .image.content {
  display: flex;
  flex-direction: row;
}

/* Image */
.ui.crowdin-modal > .content > .image {
  display: block;
  flex: 0 1 auto;
  width: @imageWidth;
  align-self: @imageVerticalAlign;
  max-width: 100%;
}
.ui.crowdin-modal > [class*="top aligned"] {
  align-self: start;
}
.ui.crowdin-modal > [class*="middle aligned"] {
  align-self: center;
}
.ui.crowdin-modal > [class*="stretched"] {
  align-self: stretch;
}

/* Description */
.ui.crowdin-modal > .content > .description {
  display: block;
  flex: 1 0 auto;
  min-width: 0;
  align-self: @descriptionVerticalAlign;
}

.ui.crowdin-modal > .content > i.icon + .description,
.ui.crowdin-modal > .content > .image + .description {
  flex: 0 1 auto;
  min-width: @descriptionMinWidth;
  width: @descriptionWidth;
  padding-left: @descriptionDistance;
}

/*rtl:ignore*/
.ui.crowdin-modal > .content > .image > i.icon {
  margin: 0;
  opacity: 1;
  width: auto;
  line-height: 1;
  font-size: @imageIconSize;
}

/*--------------
     Actions
---------------*/

.ui.crowdin-modal > .actions {
  background: @actionBackground;
  padding: @actionPadding;
  border-top: @actionBorder;
  text-align: @actionAlign;
}
.ui.crowdin-modal .actions > .button:not(.fluid) {
  margin-left: @buttonDistance;
}
.ui.basic.crowdin-modal > .actions {
  border-top:none;
}

.ui.crowdin-modal > .centered,
.ui.crowdin-modal > .center.aligned {
  text-align: center;
  &.actions > .button:not(.fluid) {
    margin-left: @buttonCenteredDistance;
    margin-right: @buttonCenteredDistance;
  }
}

/*-------------------
       Responsive
--------------------*/

/* Modal Width */
@media only screen and (max-width : @largestMobileScreen) {
  .ui.crowdin-modal:not(.fullscreen) {
    width: @mobileWidth;
    margin: @mobileMargin;
  }
}
@media only screen and (min-width : @tabletBreakpoint) {
  .ui.crowdin-modal:not(.fullscreen) {
    width: @tabletWidth;
    margin: @tabletMargin;
  }
}
@media only screen and (min-width : @computerBreakpoint) {
  .ui.crowdin-modal:not(.fullscreen) {
    width: @computerWidth;
    margin: @computerMargin;
    & > .active.dimmer + .close:not(.inside) {
      pointer-events: none;
      opacity: @closeOpacityDimmed;
    }
  }
  .ui.dimmer > .ui.crowdin-modal:not(.fullscreen) > .close:not(.inside){
    text-shadow: @closeShadow;
  }
  .ui.inverted.dimmer > .ui.crowdin-modal:not(.fullscreen) > .close:not(.inside){
    text-shadow: @invertedCloseShadow;
  }
}
@media only screen and (min-width : @largeMonitorBreakpoint) {
  .ui.crowdin-modal:not(.fullscreen) {
    width: @largeMonitorWidth;
    margin: @largeMonitorMargin;
  }
}
@media only screen and (min-width : @widescreenMonitorBreakpoint) {
  .ui.crowdin-modal:not(.fullscreen) {
    width: @widescreenMonitorWidth;
    margin: @widescreenMonitorMargin;
  }
}

/* Tablet and Mobile */
@media only screen and (max-width : @largestTabletScreen) {
  .ui.crowdin-modal > .close + .header {
    padding-right: @closeHitbox;
  }
  .ui.crowdin-modal > .close {
    top: @innerCloseTop;
    right: @innerCloseRight;
    color: @innerCloseColor;
  }
}

/* Mobile */
@media only screen and (max-width : @largestMobileScreen) {

  .ui.crowdin-modal > .header {
    padding: @mobileHeaderPadding;
  }
  .ui.crowdin-modal > .close + .header {
    padding-right: @closeHitbox;
  }
  .ui.overlay.fullscreen.crowdin-modal > .content.content.content {
    min-height: @overlayFullscreenScrollingContentMaxHeightMobile;
  }
  .ui.overlay.fullscreen.crowdin-modal > .scrolling.content.content.content {
    max-height: @overlayFullscreenScrollingContentMaxHeightMobile;
  }
  .ui.crowdin-modal > .content {
    display: block;
    padding: @mobileContentPadding !important;
  }
  .ui.crowdin-modal > .close {
    top: @mobileCloseTop !important;
    right: @mobileCloseRight !important;
  }

  /*rtl:ignore*/
  .ui.crowdin-modal .image.content {
    flex-direction: column;
  }
  .ui.crowdin-modal > .content > .image {
    display: block;
    max-width: 100%;
    margin: 0 auto !important;
    text-align: center;
    padding: @mobileImagePadding !important;
  }
  .ui.crowdin-modal > .content > .image > i.icon {
    font-size: @mobileImageIconSize;
    text-align: center;
  }

  /*rtl:ignore*/
  .ui.crowdin-modal > .content > .description {
    display: block;
    width: 100% !important;
    margin: 0 !important;
    padding: @mobileDescriptionPadding !important;
    box-shadow: none;
  }

  /* Let Buttons Stack */
  .ui.crowdin-modal > .actions {
    padding: @mobileActionPadding !important;
  }
  .ui.crowdin-modal .actions > .buttons,
  .ui.crowdin-modal .actions > .button {
    margin-bottom: @mobileButtonDistance;
  }
}

/*--------------
    Coupling
---------------*/

.ui.inverted.dimmer > .ui.crowdin-modal {
  box-shadow: @invertedBoxShadow;
}

/*******************************
             Types
*******************************/
& when (@variationModalBasic) {
  .ui.basic.crowdin-modal {
    background-color: transparent;
    border: none;
    border-radius: 0;
    box-shadow: none !important;
    color: @basicModalColor;
  }
  .ui.basic.crowdin-modal > .header,
  .ui.basic.crowdin-modal > .content,
  .ui.basic.crowdin-modal > .actions {
    background-color: transparent;
  }
  .ui.basic.crowdin-modal > .header {
    color: @basicModalHeaderColor;
    border-bottom: none;
  }
  .ui.basic.crowdin-modal > .close {
    top: @basicModalCloseTop;
    right: @basicModalCloseRight;
    color: @basicInnerCloseColor;
  }
  .ui.inverted.dimmer > .basic.crowdin-modal {
    color: @basicInvertedModalColor;
  }
  .ui.inverted.dimmer > .ui.basic.crowdin-modal > .header {
    color: @basicInvertedModalHeaderColor;
  }
}

& when (@variationModalLegacy) {
  /* Resort to margin positioning if legacy */
  .ui.legacy.legacy.crowdin-modal,
  .ui.legacy.legacy.page.dimmer > .ui.crowdin-modal {
    left: 50% !important;
  }
  .ui.legacy.legacy.crowdin-modal:not(.aligned),
  .ui.legacy.legacy.page.dimmer > .ui.crowdin-modal:not(.aligned) {
    top: 50%;
  }
  .ui.legacy.legacy.page.dimmer > .ui.scrolling.crowdin-modal:not(.aligned),
  .ui.page.dimmer > .ui.scrolling.legacy.legacy.crowdin-modal:not(.aligned),
  .ui.top.aligned.legacy.legacy.page.dimmer > .ui.crowdin-modal:not(.aligned),
  .ui.top.aligned.dimmer > .ui.legacy.legacy.crowdin-modal:not(.aligned) {
    top: auto;
  }
  & when (@variationModalOverlay) {
    .ui.legacy.overlay.fullscreen.crowdin-modal {
      margin-top: -@scrollingMargin !important;
    }
  }
}

/*******************************
             States
*******************************/

.ui.loading.crowdin-modal {
  display: block;
  visibility: hidden;
  z-index: @loadingZIndex;
}

.ui.active.crowdin-modal {
  display: block;
}

/*******************************
           Variations
*******************************/

& when (@variationModalAligned) {
  /*--------------
     Aligned
  ---------------*/

  .modals.dimmer .ui.top.aligned.crowdin-modal {
    top: @topAlignedMargin;
  }
  .modals.dimmer .ui.bottom.aligned.crowdin-modal {
    bottom: @bottomAlignedMargin;
  }

  @media only screen and (max-width : @largestMobileScreen) {
    .modals.dimmer .ui.top.aligned.crowdin-modal {
      top: @mobileTopAlignedMargin;
    }
    .modals.dimmer .ui.bottom.aligned.crowdin-modal {
      bottom: @mobileBottomAlignedMargin;
    }
  }
}

& when (@variationModalScrolling) {
  /*--------------
      Scrolling
  ---------------*/

  /* Scrolling Dimmer */
  .scrolling.dimmable.dimmed {
    overflow: hidden;
  }
  .scrolling.dimmable > .dimmer {
    justify-content: flex-start;
    position: fixed;
  }
  .scrolling.dimmable.dimmed > .dimmer {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }
  .modals.dimmer .ui.scrolling.crowdin-modal:not(.fullscreen) {
    margin: @scrollingMargin auto;
  }
/* Fix for Firefox, Edge, IE11 */
.modals.dimmer .ui.scrolling.crowdin-modal:not([class*="overlay fullscreen"])::after {
  content:'\00A0';
  position: absolute;
  height: @scrollingMargin;
}
  /* Undetached Scrolling */
  .scrolling.undetached.dimmable.dimmed {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }
  .scrolling.undetached.dimmable.dimmed > .dimmer {
    overflow: hidden;
  }
  .scrolling.undetached.dimmable .ui.scrolling.crowdin-modal:not(.fullscreen) {
    position: absolute;
    left: 50%;

  }

  /* Scrolling Content */
  .ui.crowdin-modal > .scrolling.content {
    max-height: @scrollingContentMaxHeight;
    overflow: auto;
  }
}

& when (@variationModalOverlay) {
  .ui.overlay.fullscreen.crowdin-modal > .content {
    min-height: @overlayFullscreenScrollingContentMaxHeight;
  }
  .ui.overlay.fullscreen.crowdin-modal > .scrolling.content {
    max-height: @overlayFullscreenScrollingContentMaxHeight;
  }
}

& when (@variationModalFullscreen) or (@variationModalOverlay) or (@variationModalCloseInside) {
  /*--------------
     Full Screen
  ---------------*/

  .ui.fullscreen.crowdin-modal {
    width: @fullScreenWidth;
    left: @fullScreenOffset;
    margin: @fullScreenMargin;
  }
  & when (@variationModalOverlay) {
    .ui.overlay.fullscreen.crowdin-modal {
      width: 100%;
      left: 0;
      margin: 0 auto;
      top: 0;
      border-radius:0;
    }
  }
  .ui.crowdin-modal > .close.inside + .header:not(.centered):not(.center):not(.icon),
  .ui.fullscreen.crowdin-modal > .close + .header:not(.centered):not(.center):not(.icon) {
    padding-right: @closeHitbox;
  }
  .ui.crowdin-modal > .close.inside,
  .ui.fullscreen.crowdin-modal > .close {
    top: @innerCloseTop;
    right: @innerCloseRight;
    color: @innerCloseColor;
  }
  & when (@variationModalBasic) {
    .ui.basic.fullscreen.crowdin-modal > .close {
      color: @basicInnerCloseColor;
    }
  }
}
/*--------------
      Size
---------------*/

.ui.crowdin-modal {
  font-size: @medium;
}
& when not (@variationModalSizes = false) {
  each(@variationModalSizes, {
    @hs: @{value}HeaderSize;
    @mw: @{value}MobileWidth;
    @mm: @{value}MobileMargin;
    @tw: @{value}TabletWidth;
    @tm: @{value}TabletMargin;
    @cw: @{value}ComputerWidth;
    @cm: @{value}ComputerMargin;
    @lw: @{value}LargeMonitorWidth;
    @lm: @{value}LargeMonitorMargin;
    @ww: @{value}WidescreenMonitorWidth;
    @wm: @{value}WidescreenMonitorMargin;
    .ui.@{value}.crowdin-modal > .header:not(.ui) {
      font-size: @@hs;
    }
    @media only screen and (max-width : @largestMobileScreen) {
      .ui.@{value}.crowdin-modal {
        width: @@mw;
        margin: @@mm;
      }
    }
    @media only screen and (min-width : @tabletBreakpoint) {
      .ui.@{value}.crowdin-modal {
        width: @@tw;
        margin: @@tm;
      }
    }
    @media only screen and (min-width : @computerBreakpoint) {
      .ui.@{value}.crowdin-modal {
        width: @@cw;
        margin: @@cm;
      }
    }
    @media only screen and (min-width : @largeMonitorBreakpoint) {
      .ui.@{value}.crowdin-modal {
        width: @@lw;
        margin: @@lm;
      }
    }
    @media only screen and (min-width : @widescreenMonitorBreakpoint) {
      .ui.@{value}.crowdin-modal {
        width: @@ww;
        margin: @@wm;
      }
    }
  })
}

& when (@variationModalInverted) {
  /*****************************
            Inverted
  *******************************/

  .ui.inverted.crowdin-modal {
    background: @invertedBackground;
  }

  .ui.inverted.crowdin-modal > .header,
  .ui.inverted.crowdin-modal > .content {
    background: @invertedBackground;
    color: @invertedHeaderColor;
  }

  .ui.inverted.crowdin-modal > .actions {
    background: @invertedActionBackground;
    border-top: @invertedActionBorder;
    color: @invertedActionColor;
  }

  .ui.inverted.dimmer > .crowdin-modal > .close {
    color: @invertedDimmerCloseColor;
  }


  @media only screen and (max-width: @largestTabletScreen) {
    .ui.dimmer .inverted.crowdin-modal > .close {
      color: @invertedCloseColor;
    }
  }
  & when (@variationModalFullscreen) or (@variationModalCloseInside) {
    .ui.inverted.crowdin-modal > .close.inside,
    .ui.inverted.fullscreen.crowdin-modal > .close {
      color: @invertedCloseColor;
    }
  }
}




.loadUIOverrides();
